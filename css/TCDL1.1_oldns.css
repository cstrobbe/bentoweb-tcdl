/* Namespaces: see http://www.w3.org/TR/2003/WD-css3-syntax-20030813/#defining */
@namespace dc url("http://purl.org/dc/elements/1.1/");
@namespace xlink url("http://www.w3.org/1999/xlink");
@namespace html url("http://www.w3.org/1999/xhtml");
@namespace btw url("http://bentoweb.org/refs/TCDL1");
/*@namespace tcdl url("http://bentoweb.org/refs/TCDL1.1");*/
@namespace url("http://bentoweb.org/refs/TCDL1");

:lang(de), *[lang=de] { display: none; }

testCaseDescription { 
  display: block;
  font-family: 'Trebuchet MS', Helvetica, Geneva, Verdana, /*Arial,*/ sans-serif; 
  color: #000; background-color: #ffe;
  /* margin-left: 1em; margin-right: 1em; */
  padding-left: 1em; padding-right: 1em;
  /*border: 20px solid #999; */
}
testCaseDescription:before { content: "Test Case ID: "  attr(id); font-size: 1.8em; font-weight: bold; display: block; }

formalMetadata, technology, testCase, testModes, scenario, files, rules, functionalOutcome, experience  { display: block; margin-top: 1em; margin-bottom: 1em; }

formalMetadata:before { content: "Formal Metadata"; font-size: 1.5em; display: block; font-weight: bold; margin-top: 1em; margin-bottom: 1em; }
description:before { content: "Description: "; font-weight: bold; }
title:before { content: "Title: "; font-weight: bold; }
dc|creator:before { content: "Creator: "; font-weight: bold; }
description, title, dc|creator { display: block; line-height: 1.3em; margin-top: .3em; }
dc|language, dc|rights { display: none; }
formalMetadata source { display: none; }
date { display: none; }

/* technology:before { content: "Technology"; font-size: 1.5em; display: block; } */
technology { display: none; }

testCase:before { content: "Test Case";  font-size: 1.5em; font-weight: bold; display: block; }
purpose:before { content: "Purpose: "; font-weight: bold; }
preconditions:before { content: "Preconditions: "; font-weight: bold; }
testModes:before { content:"Test Modes"; font-size: 1.3em; display: block; }
testMode { display: list-item; list-style-type: disc; margin-left: 1.5em;  }
purpose, preconditions, userGuidance, questions { display: block;}
scenario {border: 2px solid gray; padding: .5em; }
scenario:before { content: "Scenario"; font-size: 1.3em; display: block; }
userGuidance:before { content: "User guidance: "; font-weight: bold; }
openQuestion:before { content: "Open question: "; font-weight: bold; }
likertScale:before { content: "Likert scale: "; font-weight: bold; }
likertLevel:before { content: attr(number) ": "; }
likertLevel { display: list-item; list-style-type: circle; margin-left; 1.5em; }
likertLevel value, space { display: none; }

experience:before { content: "Experience"; font-size: 1.3em; display: block; }
AssistiveTechnology, UserAgent { display: list-item; list-style-type: disc; }
AssistiveTechnology:before { content: "Assistive technology: type: " attr(type) " - level: " attr(minimumLevel); }
UserAgent:before { content: "User Agent: type: " attr(type) " - level: " attr(minimumLevel); }


rules:before { content: "Rules"; font-size: 1.5em; display: block;  }
locations:before {content: "Expected result: " attr(expectedResult); font-weight: bold; display: block; }
locations[expectedResult=pass]:before {content: "Expected result: " attr(expectedResult); font-weight: bold; color: green; display: block; }
locations[expectedResult=fail]:before {content: "Expected result: " attr(expectedResult); font-weight: bold; color: red; display: block; }
locations[expectedResult=cannotTell]:before {content: "Expected result: " attr(expectedResult); font-weight: bold; color: blue; display: block; }


functionalOutcome:before { content: "Functional outcome: "; font-weight: bold; }
techComment:before { content: "Technical comment: "; font-weight: bold; }

